# -*- coding: utf-8 -*-
# ==========================================================
# ÌöåÏÇ¨ ÌäπÌôî Í∞ÄÏÉÅ Î©¥Ï†ë ÏΩîÏπò (ÌÖçÏä§Ìä∏ Ï†ÑÏö© / RAG + Î†àÏù¥Îçî + CSV)
# - ÏßÅÎ¨¥ ÏÑ†ÌÉù & Ï±ÑÏö©Í≥µÍ≥† ÏûêÎèô ÏàòÏßë(Í∂åÏû•: URL ÏûÖÎ†•, ÏóÜÏúºÎ©¥ Í≤ÄÏÉâ ÏãúÎèÑ)
# - ÌöåÏÇ¨ Îâ¥Ïä§/ÏµúÍ∑º Ïù¥Ïäà Î∞òÏòÅ (Google News RSS)
# - ÏßàÎ¨∏ Îã§ÏñëÏÑ± Í∞ïÌôî: ÌõÑÎ≥¥ NÍ∞ú ÏÉùÏÑ± + Î∞òÏ§ëÎ≥µ ÏÑ†ÌÉù + Î¨¥ÏûëÏúÑ Ìè¨Ïª§Ïä§
# - Ï±ÑÏö©Í≥µÍ≥† Í∏∞Ï§Ä ÏöîÏïΩ(ÌöåÏÇ¨/Í∞ÑÎã® ÏÜåÍ∞ú/Î™®ÏßëÎ∂ÑÏïº/Ï£ºÏöî ÏóÖÎ¨¥/ÏûêÍ≤© ÏöîÍ±¥)
# - Streamlit Cloud Ìò∏Ìôò, Plotly/FAISS ÏÑ†ÌÉùÏ†Å, ÏãúÌÅ¨Î¶ø ÏïàÏ†Ñ Î°úÎçî
# ==========================================================

import os, io, re, json, textwrap, urllib.parse, difflib, random, time
from typing import List, Dict, Tuple, Optional

import numpy as np
import pandas as pd
import streamlit as st

# ---------- Optional deps ----------
try:
    import pypdf
except Exception:
    pypdf = None

try:
    import plotly.graph_objects as go
    PLOTLY_OK = True
except Exception:
    PLOTLY_OK = False

try:
    from openai import OpenAI
except ImportError:
    st.error("`openai` Ìå®ÌÇ§ÏßÄÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§. requirements.txtÏóê openaiÎ•º Ï∂îÍ∞ÄÌñàÎäîÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî.")
    st.stop()

import requests
from bs4 import BeautifulSoup
try:
    import wikipedia
    try:
        wikipedia.set_lang("ko")
    except Exception:
        pass
except Exception:
    wikipedia = None

# ---------- Page config ----------
st.set_page_config(page_title="ÌöåÏÇ¨ ÌäπÌôî Í∞ÄÏÉÅ Î©¥Ï†ë ÏΩîÏπò", page_icon="üéØ", layout="wide")

# ---------- Secrets loader ----------
def _secrets_file_exists() -> bool:
    candidates = [
        os.path.join(os.path.expanduser("~"), ".streamlit", "secrets.toml"),
        os.path.join(os.getcwd(), ".streamlit", "secrets.toml"),
    ]
    return any(os.path.exists(p) for p in candidates)

def load_api_key_from_env_or_secrets() -> Optional[str]:
    key = os.getenv("OPENAI_API_KEY")
    if key: return key
    try:
        if _secrets_file_exists() or hasattr(st, "secrets"):
            return st.secrets.get("OPENAI_API_KEY", None)
    except Exception:
        pass
    return None

def load_naver_keys():
    cid = os.getenv("NAVER_CLIENT_ID")
    csec = os.getenv("NAVER_CLIENT_SECRET")
    try:
        if hasattr(st, "secrets"):
            cid = cid or st.secrets.get("NAVER_CLIENT_ID", None)
            csec = csec or st.secrets.get("NAVER_CLIENT_SECRET", None)
    except Exception:
        pass
    return cid, csec

NAVER_ID, NAVER_SECRET = load_naver_keys()

# ---------- Text utils ----------
def _clean_text(t: str) -> str:
    return re.sub(r"\s+", " ", t or "").strip()

def _snippetize(text: str, maxlen: int = 220) -> str:
    t = _clean_text(text)
    return t if len(t) <= maxlen else t[: maxlen - 1] + "‚Ä¶"

def chunk_text(text: str, size: int = 900, overlap: int = 150):
    text = re.sub(r"\s+", " ", text).strip()
    if not text: return []
    out, start = [], 0
    while start < len(text):
        end = min(len(text), start + size)
        out.append(text[start:end])
        if end == len(text): break
        start = max(0, end - overlap)
    return out

def read_file_to_text(uploaded) -> str:
    name = uploaded.name.lower()
    data = uploaded.read()
    if name.endswith((".txt", ".md")):
        for enc in ("utf-8", "cp949", "euc-kr"):
            try: return data.decode(enc)
            except Exception: continue
        return data.decode("utf-8", errors="ignore")
    elif name.endswith(".pdf"):
        if pypdf is None:
            st.warning("pypdfÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§. requirements.txtÏóê pypdf Ï∂îÍ∞Ä.")
            return ""
        try:
            reader = pypdf.PdfReader(io.BytesIO(data))
            return "\n\n".join([(reader.pages[i].extract_text() or "") for i in range(len(reader.pages))])
        except Exception as e:
            st.warning(f"PDF ÌååÏã± Ïã§Ìå®({uploaded.name}): {e}")
            return ""
    return ""

# ---------- Company/domain utils ----------
VAL_KEYWORDS = ["ÌïµÏã¨Í∞ÄÏπò","Í∞ÄÏπò","ÎØ∏ÏÖò","ÎπÑÏ†Ñ","Î¨∏Ìôî","ÏõêÏπô","Ï≤†Ìïô","Í≥†Í∞ù","Îç∞Ïù¥ÌÑ∞","ÌòÅÏã†",
                "values","mission","vision","culture","principles","philosophy","customer","data","innovation"]

def _domain(u: str|None) -> str|None:
    if not u: return None
    try:
        if not u.startswith("http"): u = "https://" + u
        return urllib.parse.urlparse(u).netloc.lower().replace("www.","")
    except Exception:
        return None

def _name_similarity(a: str, b: str) -> float:
    return difflib.SequenceMatcher(None, a.lower(), b.lower()).ratio()

# ---------- Wikipedia helpers (ÌõÑÎ≥¥ ÎÖ∏Ï∂ú/ÏÑ†ÌÉù) ----------
def wiki_search_candidates(company_name: str, k: int = 8) -> list[str]:
    if wikipedia is None or not company_name.strip():
        return []
    try:
        return wikipedia.search(company_name.strip(), results=k) or []
    except Exception:
        return []

def fetch_wikipedia_summary_exact(title: str) -> dict|None:
    if wikipedia is None or not title: return None
    try:
        page = wikipedia.page(title, auto_suggest=False, redirect=True)
        first = _clean_text((page.summary or "").split("\n")[0])
        return {"company_name": page.title, "wiki_summary": first}
    except Exception:
        return None

# ---------- ÎÑ§Ïù¥Î≤Ñ Open API ÎûòÌçº ----------
def _naver_api_get(api: str, params: dict, cid: str, csec: str):
    url = f"https://openapi.naver.com/v1/search/{api}.json"
    headers = {
        "X-Naver-Client-Id": cid,
        "X-Naver-Client-Secret": csec,
        "User-Agent": "Mozilla/5.0",
    }
    r = requests.get(url, headers=headers, params=params, timeout=8)
    if r.status_code != 200:
        return None
    return r.json()

def naver_search_news(query: str, display: int = 10, sort: str = "date") -> list[dict]:
    cid, csec = load_naver_keys()
    if not (cid and csec):  # ÌÇ§ ÏóÜÏúºÎ©¥ Îπà Î¶¨Ïä§Ìä∏(Ìè¥Î∞± ÏÇ¨Ïö©)
        return []
    js = _naver_api_get("news", {"query": query, "display": display, "sort": sort}, cid, csec)
    if not js: return []
    out = []
    for it in js.get("items", []):
        title = _clean_text(re.sub(r"</?b>|&quot;|&apos;|&amp;|&lt;|&gt;", "", it.get("title","")))
        out.append({"title": title, "link": it.get("link"), "pubDate": it.get("pubDate")})
    return out

def naver_search_web(query: str, display: int = 10, sort: str = "date") -> list[str]:
    cid, csec = load_naver_keys()
    if not (cid and csec):
        return []
    js = _naver_api_get("webkr", {"query": query, "display": display, "sort": sort}, cid, csec)
    if not js: return []
    links = []
    for it in js.get("items", []):
        link = it.get("link")
        if link and link not in links:
            links.append(link)
    return links

# ---------- ÌôàÌéòÏù¥ÏßÄ Ïä§ÎãàÌé´ ----------
def fetch_site_snippets(base_url: str | None, company_name_hint: str | None = None) -> dict:
    if not base_url:
        return {"values": [], "recent": [], "site_name": None, "about": None}
    url0 = base_url.strip()
    if not url0.startswith("http"): url0 = "https://" + url0
    cand_paths = ["", "/", "/about", "/company", "/about-us", "/mission", "/values", "/culture"]
    values_found, recent_found = [], []
    site_name, about_para = None, None

    for path in cand_paths:
        url = url0.rstrip("/") + path
        try:
            r = requests.get(url, timeout=6, headers={"User-Agent":"Mozilla/5.0"})
            if r.status_code != 200 or "text/html" not in r.headers.get("content-type", ""):
                continue
            soup = BeautifulSoup(r.text, "html.parser")

            if site_name is None:
                og = soup.find("meta", {"property":"og:site_name"}) or soup.find("meta", {"name":"application-name"})
                if og and og.get("content"): site_name = _clean_text(og["content"])
                elif soup.title and soup.title.string: site_name = _clean_text(soup.title.string.split("|")[0])

            if about_para is None:
                hero = soup.find(["p","div"], class_=re.compile(r"(lead|hero|intro)", re.I)) if soup else None
                if hero: about_para = _snippetize(hero.get_text(" "))

            for tag in soup.find_all(["h1","h2","h3","p","li"]):
                txt = _clean_text(tag.get_text(separator=" "))
                if 10 <= len(txt) <= 240:
                    if any(k.lower() in txt.lower() for k in VAL_KEYWORDS):
                        values_found.append(txt)
                    if any(k in txt for k in ["ÌîÑÎ°úÏ†ùÌä∏","Í∞úÎ∞ú","Ï∂úÏãú","ÏÑ±Í≥º","project","launched","release","delivered","improved"]):
                        recent_found.append(txt)
        except Exception:
            continue

    if company_name_hint and site_name and _name_similarity(company_name_hint, site_name) < 0.35:
        values_found, recent_found = [], []  # Ïò§ÌÉê Î∞©ÏßÄ

    def dedup(lst):
        seen=set(); out=[]
        for x in lst:
            if x not in seen: seen.add(x); out.append(x)
        return out
    values_found = dedup(values_found)[:5]
    recent_found = dedup(recent_found)[:5]

    trimmed=[]
    for v in values_found:
        v2 = v.split(":",1)[-1]
        if len(v2)>60 and "," in v2:
            trimmed += [p.strip() for p in v2.split(",") if 2<=len(p.strip())<=24][:6]
        else:
            trimmed.append(v2[:60])

    return {"values": trimmed[:6], "recent": recent_found, "site_name": site_name, "about": about_para}

# ---------- Îâ¥Ïä§: ÎÑ§Ïù¥Î≤Ñ Ïö∞ÏÑ†, Ìè¥Î∞± Íµ¨Í∏ÄRSS ----------
def fetch_news(company_name: str, max_items: int = 6) -> list[dict]:
    news = naver_search_news(company_name, display=max_items, sort="date")
    if news:
        return news
    # fallback: Google News RSS
    q = urllib.parse.quote(company_name)
    url = f"https://news.google.com/rss/search?q={q}&hl=ko&gl=KR&ceid=KR:ko"
    items = []
    try:
        r = requests.get(url, timeout=8)
        if r.status_code != 200: return []
        soup = BeautifulSoup(r.text, "xml")
        for it in soup.find_all("item")[:max_items]:
            title = _clean_text(it.title.get_text()) if it.title else ""
            link  = it.link.get_text() if it.link else ""
            pub   = it.pubDate.get_text() if it.pubDate else ""
            items.append({"title": title, "link": link, "pubDate": pub})
    except Exception:
        return []
    return items

# ---------- Ï±ÑÏö© Í≥µÍ≥†: ÎÑ§Ïù¥Î≤Ñ ÏõπÍ≤ÄÏÉâ Ïö∞ÏÑ†, Ìè¥Î∞± DuckDuckGo ----------
SEARCH_ENGINES = ["https://duckduckgo.com/html/?q={query}"]
JOB_SITES = ["wanted.co.kr","saramin.co.kr","jobkorea.co.kr","rocketpunch.com",
             "indeed.com","linkedin.com","recruit.navercorp.com","kakao.recruit","naver"]

def discover_job_posting_urls(company_name: str, role: str, limit: int = 5) -> list[str]:
    urls = []
    if NAVER_ID and NAVER_SECRET:
        for dom in JOB_SITES:
            if len(urls) >= limit: break
            q = f"{company_name} {role} site:{dom}"
            links = naver_search_web(q, display=5, sort="date")
            for lk in links:
                if _domain(lk) and dom in _domain(lk) and lk not in urls:
                    urls.append(lk)
                if len(urls) >= limit: break
        if urls:
            return urls[:limit]
    # fallback: DuckDuckGo
    site_part = " OR ".join([f'site:{d}' for d in JOB_SITES])
    q = f'{company_name} {role} ({site_part})'
    for engine in SEARCH_ENGINES:
        url = engine.format(query=urllib.parse.quote(q))
        try:
            r = requests.get(url, timeout=8, headers={"User-Agent":"Mozilla/5.0"})
            if r.status_code != 200:
                continue
            soup = BeautifulSoup(r.text, "html")
            for a in soup.find_all("a", href=True):
                href = a["href"]
                if href.startswith("/l/?kh=-1&uddg="):
                    href = urllib.parse.unquote(href.split("/l/?kh=-1&uddg=")[-1])
                dom = _domain(href)
                if not dom: continue
                if any(d in dom for d in JOB_SITES):
                    if href not in urls:
                        urls.append(href)
                if len(urls) >= limit:
                    break
        except Exception:
            continue
    return urls[:limit]

# ---------- JobPosting ÌååÏÑú ----------
def _extract_json_ld_job(soup: BeautifulSoup) -> Optional[dict]:
    for s in soup.find_all("script", type="application/ld+json"):
        try:
            data = json.loads(s.string or "")
            seq = data if isinstance(data, list) else [data]
            for obj in seq:
                typ = obj.get("@type") if isinstance(obj, dict) else None
                if (isinstance(typ, list) and "JobPosting" in typ) or typ == "JobPosting":
                    return obj
        except Exception:
            continue
    return None

def parse_job_posting(url: str) -> dict:
    out = {"title": None, "responsibilities": [], "qualifications": [], "company_intro": None}
    try:
        r = requests.get(url, timeout=10, headers={"User-Agent":"Mozilla/5.0"})
        if r.status_code != 200 or "text/html" not in r.headers.get("content-type",""): return out
        soup = BeautifulSoup(r.text, "html.parser")

        jp = _extract_json_ld_job(soup)
        if jp:
            out["title"] = jp.get("title")
            desc = _clean_text(jp.get("description", ""))
            if desc:
                bullets = re.split(r"[‚Ä¢\-\n‚Ä¢¬∑‚ñ™Ô∏è‚ñ∂Ô∏é]+", desc)
                bullets = [b.strip(" -‚Ä¢¬∑‚ñ™Ô∏è‚ñ∂Ô∏é") for b in bullets if len(b.strip()) > 3]
                for b in bullets:
                    if any(k in b for k in ["ÏûêÍ≤©","ÏöîÍ±¥","requirements","qualification","ÌïÑÏàò","Ïö∞ÎåÄ"]):
                        out["qualifications"].append(b)
                    else:
                        out["responsibilities"].append(b)

        # Ìó§Îçî Ìú¥Î¶¨Ïä§Ìã±
        sections = {}
        for h in soup.find_all(re.compile("^h[1-4]$")):
            head = _clean_text(h.get_text())
            if not head: continue
            nxt=[]; sib=h.find_next_sibling(); stop={"h1","h2","h3","h4"}
            while sib and sib.name not in stop:
                if sib.name in {"p","li","ul","ol","div"}:
                    txt=_clean_text(sib.get_text(" "))
                    if len(txt)>5: nxt.append(txt)
                sib=sib.find_next_sibling()
            if nxt: sections[head]=" ".join(nxt)

        def pick(keys):
            for k in sections:
                if any(kk.lower() in k.lower() for kk in keys): return sections[k]
            return None

        resp = pick(["Ï£ºÏöî ÏóÖÎ¨¥","Îã¥Îãπ ÏóÖÎ¨¥","ÏóÖÎ¨¥","Responsibilities","What you will do","Role"])
        qual = pick(["ÏûêÍ≤© ÏöîÍ±¥","ÏßÄÏõê ÏûêÍ≤©","Ïö∞ÎåÄ","Requirements","Qualifications","Must have","Preferred"])
        if resp and not out["responsibilities"]:
            out["responsibilities"]=[x for x in re.split(r"[‚Ä¢\-\n‚Ä¢¬∑‚ñ™Ô∏è‚ñ∂Ô∏é]+", resp) if len(x.strip())>3][:12]
        if qual and not out["qualifications"]:
            out["qualifications"]=[x for x in re.split(r"[‚Ä¢\-\n‚Ä¢¬∑‚ñ™Ô∏è‚ñ∂Ô∏é]+", qual) if len(x.strip())>3][:12]

        meta_desc = soup.find("meta", {"name":"description"}) or soup.find("meta", {"property":"og:description"})
        if meta_desc and meta_desc.get("content"): out["company_intro"]=_snippetize(meta_desc["content"], 220)
    except Exception:
        pass

    out["responsibilities"]=[_snippetize(x,140) for x in out["responsibilities"]][:12]
    out["qualifications"]=[_snippetize(x,140) for x in out["qualifications"]][:12]
    return out

# ---------- OpenAI ----------
with st.sidebar:
    st.title("‚öôÔ∏è ÏÑ§Ï†ï")
    API_KEY = load_api_key_from_env_or_secrets()
    if not API_KEY:
        st.info("ÌôòÍ≤ΩÎ≥ÄÏàò/SecretsÏóêÏÑú ÌÇ§Î•º Î™ª Ï∞æÏïòÏäµÎãàÎã§. ÏïÑÎûòÏóê ÏûÖÎ†• ÌõÑ ÏóîÌÑ∞.")
        API_KEY = st.text_input("OPENAI_API_KEY", type="password")
    MODEL = st.selectbox("Ï±ó Î™®Îç∏", ["gpt-4o-mini","gpt-4o","gpt-4.1-mini"], index=0)
    EMBED_MODEL = st.selectbox("ÏûÑÎ≤†Îî© Î™®Îç∏", ["text-embedding-3-small","text-embedding-3-large"], index=0)

    _openai_ver = None; _httpx_ver = None
    try:
        import openai as _openai_pkg; _openai_ver = getattr(_openai_pkg, "__version__", None)
    except Exception: pass
    try:
        import httpx as _httpx_pkg; _httpx_ver = getattr(_httpx_pkg, "__version__", None)
    except Exception: pass
    with st.expander("ÎîîÎ≤ÑÍ∑∏: ÏãúÌÅ¨Î¶ø/Î≤ÑÏ†Ñ ÏÉÅÌÉú"):
        st.write({
            "api_key_provided": bool(API_KEY),
            "naver_keys": bool(NAVER_ID and NAVER_SECRET),
            "openai_version": _openai_ver,
            "httpx_version": _httpx_ver,
        })

if not API_KEY:
    st.error("OpenAI API KeyÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§. (Cloud: Settings ‚Üí Secrets)")
    st.stop()
try:
    client = OpenAI(api_key=API_KEY, timeout=30.0)
except Exception as e:
    st.error(f"OpenAI Ï¥àÍ∏∞Ìôî Ïò§Î•ò: {e}"); st.stop()

# ==========================================================
# MAIN LAYOUT ‚Äî ‚ë† ÌöåÏÇ¨ ÏûÖÎ†• | ‚ë° ÏßÅÎ¨¥ ÏûÖÎ†•  ‚Üí ‚ë¢ ÏöîÏïΩ ‚Üí ‚ë£ ÏßàÎ¨∏ ‚Üí ‚ë§ ÎãµÎ≥Ä
# ==========================================================
col_company, col_role = st.columns([1,1], vertical_alignment="start")

# ‚ë† ÌöåÏÇ¨ ÏûÖÎ†• ------------------------------------------------
with col_company:
    st.subheader("‚ë† ÌöåÏÇ¨ ÏûÖÎ†•")
    company_name_input = st.text_input("ÌöåÏÇ¨ Ïù¥Î¶Ñ", placeholder="Ïòà: ÎÑ§Ïù¥Î≤Ñ / Kakao / ÏÇºÏÑ±SDS")
    homepage_input     = st.text_input("Í≥µÏãù ÌôàÌéòÏù¥ÏßÄ URL(ÏÑ†ÌÉù)", placeholder="https://...")
    job_url_input      = st.text_input("Ï±ÑÏö© Í≥µÍ≥† URL(ÏÑ†ÌÉù)")

    # ÌöåÏÇ¨ ÌõÑÎ≥¥ Í≤ÄÏÉâ(Ïò§Ïù∏Ïãù Î∞©ÏßÄ)
    if company_name_input.strip():
        cands = wiki_search_candidates(company_name_input, k=8)
        cands = ["(ÏûÖÎ†• Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©)"] + cands
        chosen = st.selectbox("ÌöåÏÇ¨ ÌõÑÎ≥¥(Ï†ïÌôïÌïú Ïù¥Î¶Ñ ÏÑ†ÌÉù)", options=cands, index=0, help="ÏúÑÌÇ§ ÌõÑÎ≥¥ÏóêÏÑú Ï†ïÌôïÌïú ÌöåÏÇ¨Î•º ÏÑ†ÌÉùÌïòÎ©¥ Ïò§Ïù∏ÏãùÏù¥ ÌÅ¨Í≤å Ï§ÑÏñ¥Îì≠ÎãàÎã§.")
    else:
        chosen = "(ÏûÖÎ†• Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©)"

    if "company_state" not in st.session_state:
        st.session_state.company_state = {}

    if st.button("ÌöåÏÇ¨ Ï†ïÎ≥¥ Î∂àÎü¨Ïò§Í∏∞"):
        # ÏúÑÌÇ§ Í≥†Ï†ï
        wiki = None
        if chosen != "(ÏûÖÎ†• Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©)":
            wiki = fetch_wikipedia_summary_exact(chosen)
        elif company_name_input.strip():
            wiki = {"company_name": company_name_input.strip(), "wiki_summary": None}

        # ÏÇ¨Ïù¥Ìä∏ ÌÅ¨Î°§ÎßÅ
        site = fetch_site_snippets(homepage_input or None, (wiki or {}).get("company_name") or company_name_input)

        # Îâ¥Ïä§ (ÎÑ§Ïù¥Î≤Ñ Ïö∞ÏÑ†)
        news_items = fetch_news((wiki or {}).get("company_name") or company_name_input)

        st.session_state.company_state["base"] = {
            "company_name": site.get("site_name") or (wiki or {}).get("company_name") or company_name_input.strip(),
            "wiki_summary": (wiki or {}).get("wiki_summary"),
            "homepage": homepage_input or None,
            "values": site.get("values", []),
            "recent_projects": site.get("recent", []),
            "company_intro": site.get("about") or (wiki or {}).get("wiki_summary"),
            "news": news_items
        }
        st.success("ÌöåÏÇ¨ Ï†ïÎ≥¥ Í∞±Ïã† ÏôÑÎ£å")

# ‚ë° ÏßÅÎ¨¥ ÏûÖÎ†• ------------------------------------------------
with col_role:
    st.subheader("‚ë° ÏßÅÎ¨¥ ÏûÖÎ†•")
    role_title = st.text_input("ÏßÄÏõê ÏßÅÎ¨¥Î™Ö", placeholder="Îç∞Ïù¥ÌÑ∞ Ïï†ÎÑêÎ¶¨Ïä§Ìä∏ / ML ÏóîÏßÄÎãàÏñ¥ ...")
    st.caption("Ï±ÑÏö© Í≥µÍ≥† URLÏùÑ Î™®Î•¥Î©¥ ‚ÄòÌöåÏÇ¨/ÏßÅÎ¨¥Î™Ö‚ÄôÏúºÎ°ú ÎÑ§Ïù¥Î≤Ñ ÏõπÍ≤ÄÏÉâÏùÑ ÌÜµÌï¥ ÏûêÎèô ÌÉêÏÉâÌï©ÎãàÎã§.")
    if st.button("Ï±ÑÏö© Í≥µÍ≥† Î∂àÎü¨Ïò§Í∏∞/Í≤ÄÏÉâ"):
        jp_data = {"title": None,"responsibilities":[],"qualifications":[],"company_intro":None}
        urls = []
        if job_url_input.strip():
            urls = [job_url_input.strip()]
        else:
            urls = discover_job_posting_urls(st.session_state.company_state.get("base",{}).get("company_name","") or role_title,
                                             role_title or "", limit=4)
        if urls:
            jp_data = parse_job_posting(urls[0])
        st.session_state.company_state["job"] = {
            "role": role_title,
            "job_url": urls[0] if urls else (job_url_input.strip() or None),
            "role_requirements": jp_data["responsibilities"],
            "role_qualifications": jp_data["qualifications"],
            "company_intro": jp_data["company_intro"] or st.session_state.company_state.get("base",{}).get("company_intro")
        }
        st.success("Ï±ÑÏö© Í≥µÍ≥† Î∞òÏòÅ ÏôÑÎ£å")

# company Í∞ùÏ≤¥ Ï°∞Î¶Ω ------------------------------------------
base = st.session_state.get("company_state",{}).get("base",{})
job  = st.session_state.get("company_state",{}).get("job",{})
company = {
    "company_name": base.get("company_name") or "(ÌöåÏÇ¨Î™Ö ÎØ∏ÏÑ§Ï†ï)",
    "homepage": base.get("homepage"),
    "wiki_summary": base.get("wiki_summary"),
    "values": base.get("values", []),
    "recent_projects": base.get("recent_projects", []),
    "company_intro": job.get("company_intro") or base.get("company_intro"),
    "news": base.get("news", []),
    "role": job.get("role"),
    "role_requirements": job.get("role_requirements", []),
    "role_qualifications": job.get("role_qualifications", []),
    "job_url": job.get("job_url")
}

# ‚ë¢ ÌöåÏÇ¨ ÏöîÏïΩ (Ï±ÑÏö©Í≥µÍ≥† Í∏∞Ï§Ä) --------------------------------
st.subheader("‚ë¢ ÌöåÏÇ¨ ÏöîÏïΩ (Ï±ÑÏö©Í≥µÍ≥† Í∏∞Ï§Ä)")
def build_company_summary_for_ui(c: dict) -> dict:
    return {
        "ÌöåÏÇ¨Î™Ö": c.get("company_name"),
        "Í∞ÑÎã® ÏÜåÍ∞ú": c.get("company_intro") or c.get("wiki_summary"),
        "Î™®Ïßë Î∂ÑÏïº": c.get("role"),
        "Ï£ºÏöî ÏóÖÎ¨¥(ÏöîÏïΩ)": c.get("role_requirements")[:6],
        "ÏûêÍ≤© ÏöîÍ±¥(ÏöîÏïΩ)": c.get("role_qualifications")[:6],
        "ÌïµÏã¨Í∞ÄÏπò(Ï∂îÏ†ï)": c.get("values")[:6],
        "ÌôàÌéòÏù¥ÏßÄ": c.get("homepage"),
        "Ï±ÑÏö© Í≥µÍ≥†": c.get("job_url"),
        "ÏµúÍ∑º Îâ¥Ïä§": [ n.get("title") for n in c.get("news", [])[:5] ],
    }
st.json(build_company_summary_for_ui(company), expanded=True)

# ‚ë£ ÏßàÎ¨∏ ÏÉùÏÑ± ------------------------------------------------
st.subheader("‚ë£ ÏßàÎ¨∏ ÏÉùÏÑ±")

def embed_texts(client: OpenAI, embed_model: str, texts: list[str]) -> np.ndarray:
    if not texts:
        return np.zeros((0, 1536), dtype=np.float32)
    resp = client.embeddings.create(model=embed_model, input=texts)
    return np.array([d.embedding for d in resp.data], dtype=np.float32)

with st.expander("RAG ÏòµÏÖò (ÏÑ†ÌÉù)"):
    rag_enabled = st.toggle("ÌöåÏÇ¨ Î¨∏ÏÑú Í∏∞Î∞ò ÏßàÎ¨∏/ÏΩîÏπ≠ ÏÇ¨Ïö©", value=True, key="rag_on")
    top_k = st.slider("Í≤ÄÏÉâ ÏÉÅÏúÑ K", 1, 8, 4, 1, key="topk")
    if "rag_store" not in st.session_state:
        st.session_state.rag_store = {"chunks": [], "embeds": None}
    docs = st.file_uploader("ÌöåÏÇ¨ Î¨∏ÏÑú ÏóÖÎ°úÎìú (TXT/MD/PDF, Ïó¨Îü¨ ÌååÏùº Í∞ÄÎä•)", type=["txt","md","pdf"], accept_multiple_files=True)
    chunk_size = st.slider("Ï≤≠ÌÅ¨ Í∏∏Ïù¥(Î¨∏Ïûê)", 400, 2000, 900, 100)
    chunk_ovlp = st.slider("Ïò§Î≤ÑÎû©(Î¨∏Ïûê)", 0, 400, 150, 10)
    if docs:
        with st.spinner("Î¨∏ÏÑú Ïù∏Îç±Ïã± Ï§ë..."):
            chunks=[]
            for up in docs:
                t = read_file_to_text(up)
                if t: chunks += chunk_text(t, chunk_size, chunk_ovlp)
            if chunks:
                embs = embed_texts(client, "text-embedding-3-small", chunks)
                st.session_state.rag_store["chunks"] += chunks
                if st.session_state.rag_store["embeds"] is None or st.session_state.rag_store["embeds"].size==0:
                    st.session_state.rag_store["embeds"] = embs
                else:
                    st.session_state.rag_store["embeds"] = np.vstack([st.session_state.rag_store["embeds"], embs])
                st.success(f"Ï∂îÍ∞Ä Ï≤≠ÌÅ¨ {len(chunks)}Í∞ú")

def cosine_topk(matrix: np.ndarray, query: np.ndarray, k: int = 4):
    if matrix.size == 0:
        return np.array([]), np.array([], dtype=int)
    qn = query / (np.linalg.norm(query, axis=1, keepdims=True) + 1e-12)
    mn = matrix / (np.linalg.norm(matrix, axis=1, keepdims=True) + 1e-12)
    sims = mn @ qn.T
    sims = sims.reshape(-1)
    idx = np.argsort(-sims)[:k]
    return sims[idx], idx

def retrieve_supports(qtext: str, k: int):
    store = st.session_state.rag_store
    chs, embs = store.get("chunks", []), store.get("embeds")
    if not st.session_state.get("rag_on") or embs is None or not chs:
        return []
    qv = embed_texts(client, "text-embedding-3-small", [qtext])
    scores, idxs = cosine_topk(embs, qv, k=k)
    return [("ÌöåÏÇ¨ÏûêÎ£å", float(s), chs[int(i)]) for s,i in zip(scores, idxs)]

TYPE_INSTRUCTIONS = {
    "ÌñâÎèô(STAR)": "Í≥ºÍ±∞ Ïã§Î¨¥ ÏÇ¨Î°ÄÎ•º ÎÅåÏñ¥ÎÇ¥ÎèÑÎ°ù S(ÏÉÅÌô©)-T(Í≥ºÏ†ú)-A(ÌñâÎèô)-R(ÏÑ±Í≥º)Î•º Ïú†ÎèÑÌïòÎäî ÏßàÎ¨∏",
    "Í∏∞Ïà† Ïã¨Ï∏µ": "ÌïµÏã¨ Í∏∞Ïà†Ï†Å ÏùòÏÇ¨Í≤∞Ï†ï¬∑Ìä∏Î†àÏù¥ÎìúÏò§ÌîÑ¬∑ÏÑ±Îä•/ÎπÑÏö©/ÌíàÏßà ÏßÄÌëúÎ•º ÌååÍ≥†ÎìúÎäî Ïã¨Ï∏µ ÏßàÎ¨∏",
    "ÌïµÏã¨Í∞ÄÏπò Ï†ÅÌï©ÏÑ±": "ÌïµÏã¨Í∞ÄÏπòÏôÄ ÌÉúÎèÑÎ•º Í≤ÄÏ¶ùÌïòÎäî, ÏÉÅÌô©Í∏∞Î∞ò ÌñâÎèôÏùÑ Ïú†ÎèÑÌïòÎäî ÏßàÎ¨∏",
    "Ïó≠ÏßàÎ¨∏": "ÏßÄÏõêÏûêÍ∞Ä ÌöåÏÇ¨Î•º ÌèâÍ∞ÄÌï† Ïàò ÏûàÎèÑÎ°ù ÌÜµÏ∞∞Î†• ÏûàÎäî Ïó≠ÏßàÎ¨∏"
}

def build_ctx(c: dict) -> str:
    news = ", ".join([_snippetize(n["title"], 70) for n in c.get("news", [])[:3]])
    return textwrap.dedent(f"""
    [ÌöåÏÇ¨Î™Ö] {c.get('company_name','')}
    [ÌöåÏÇ¨ ÏÜåÍ∞ú] {c.get('company_intro') or c.get('wiki_summary') or ''}
    [Î™®Ïßë Î∂ÑÏïº] {c.get('role','')}
    [Ï£ºÏöî ÏóÖÎ¨¥] {", ".join(c.get('role_requirements', [])[:6])}
    [ÏûêÍ≤© ÏöîÍ±¥] {", ".join(c.get('role_qualifications', [])[:6])}
    [ÌïµÏã¨Í∞ÄÏπò] {", ".join(c.get('values', [])[:6])}
    [ÏµúÍ∑º Ïù¥Ïäà/Îâ¥Ïä§] {news}
    """).strip()

def build_focuses(c: dict, supports: list[Tuple[str,float,str]], k: int = 4) -> list[str]:
    pool=[]
    if c.get("role"): pool.append(c["role"])
    pool += c.get("role_requirements", [])[:6]
    pool += c.get("role_qualifications", [])[:6]
    pool += c.get("values", [])[:6]
    pool += [ _snippetize(n['title'], 60) for n in c.get("news", [])[:4] ]
    for _,_,txt in (supports or [])[:3]:
        pool += [t.strip() for t in re.split(r"[‚Ä¢\-\n\.]", txt) if 6 < len(t.strip()) < 100][:3]
    pool=[p for p in pool if p]; random.shuffle(pool)
    return pool[:k]

def _similarity(a: str, b: str) -> float:
    return difflib.SequenceMatcher(None, a, b).ratio()

def pick_diverse(cands: list[str], hist: list[str], gamma: float = 0.35) -> str:
    if not cands: return ""
    if not hist:  return random.choice(cands)
    best=None; best_score=1e9
    for q in cands:
        sims=[_similarity(q,h) for h in hist] or [0.0]
        score=(sum(sims)/len(sims)) + gamma*np.std(sims)
        if score < best_score:
            best_score=score; best=q
    return best

q_type = st.selectbox("ÏßàÎ¨∏ Ïú†Ìòï", list(TYPE_INSTRUCTIONS.keys()))
level  = st.selectbox("ÎÇúÏù¥ÎèÑ/Ïó∞Ï∞®", ["Ï£ºÎãàÏñ¥","ÎØ∏Îì§","ÏãúÎãàÏñ¥"])
hint   = st.text_input("ÏßàÎ¨∏ ÏÉùÏÑ± ÌûåÌä∏(ÏÑ†ÌÉù)", placeholder="Ïòà: Ï†ÑÌôò ÌçºÎÑê / Î™®Îç∏ ÏÑ±Îä•-ÎπÑÏö© / Îç∞Ïù¥ÌÑ∞ ÌíàÏßà")

if st.button("ÏÉà ÏßàÎ¨∏ Î∞õÍ∏∞", use_container_width=True):
    try:
        supports=[]
        if st.session_state.get("rag_on"):
            base_q = hint.strip() or f"{company.get('role','')} {' '.join(company.get('role_requirements', [])[:3])}"
            supports = retrieve_supports(base_q, st.session_state.get("topk",4))

        ctx = build_ctx(company)
        focuses = build_focuses(company, supports, k=4)
        rag_note = ""
        if supports:
            joined="\n".join([f"- ({s:.2f}) {txt[:200]}" for _,s,txt in supports[:3]])
            rag_note=f"\n[Í∑ºÍ±∞ Î∞úÏ∑å]\n{joined}"

        seed = int(time.time()*1000) % 2_147_483_647
        sys = f"""ÎÑàÎäî '{company.get('company_name','')}'Ïùò '{company.get('role','')}' Î©¥Ï†ëÍ¥ÄÏù¥Îã§.
ÌöåÏÇ¨/ÏßÅÎ¨¥ Ïª®ÌÖçÏä§Ìä∏ÏôÄ Ï±ÑÏö©Í≥µÍ≥†(Ï£ºÏöîÏóÖÎ¨¥/ÏûêÍ≤©ÏöîÍ±¥), ÏµúÍ∑º Ïù¥Ïäà/Îâ¥Ïä§, (ÏûàÎã§Î©¥) Í∑ºÍ±∞ Î¨∏ÏÑúÎ•º Î∞òÏòÅÌïòÏó¨ **{q_type}** Ïú†Ìòï({TYPE_INSTRUCTIONS[q_type]})Ïùò ÏßàÎ¨∏ **6Í∞ú ÌõÑÎ≥¥**Î•º ÌïúÍµ≠Ïñ¥Î°ú ÏÉùÏÑ±ÌïòÎùº.
ÏÑúÎ°ú **ÌòïÌÉú¬∑Í¥ÄÏ†ê¬∑ÌÇ§ÏõåÎìú**Í∞Ä Îã¨ÎùºÏïº ÌïòÎ©∞ ÎÇúÏù¥ÎèÑÎäî {level}.
ÏïÑÎûò 'Ìè¨Ïª§Ïä§' Ï§ë ÏµúÏÜå 1Í∞ú ÌÇ§ÏõåÎìúÎ•º Î¨∏Ïû•Ïóê **Î™ÖÏãúÏ†ÅÏúºÎ°ú Ìè¨Ìï®**ÌïòÍ≥†, ÏßÄÌëú/ÏàòÏπò/Í∏∞Í∞Ñ/Í∑úÎ™®/Î¶¨Ïä§ÌÅ¨ ÏöîÏÜåÎ•º Ï†ÅÏ†àÌûà ÏÑûÏñ¥Îùº.
Ìè¨Îß∑: 1) ... 2) ... 3) ... ... (Ìïú Ï§ÑÏî©)"""
        user = f"""[ÌöåÏÇ¨/ÏßÅÎ¨¥ Ïª®ÌÖçÏä§Ìä∏]\n{ctx}\n[Ìè¨Ïª§Ïä§]\n- {chr(10).join(focuses)}{rag_note}\n[ÎûúÎç§ÏãúÎìú] {seed}"""
        resp = client.chat.completions.create(model=MODEL, temperature=0.95,
                                              messages=[{"role":"system","content":sys},{"role":"user","content":user}])
        raw = resp.choices[0].message.content.strip()
        cands = [re.sub(r'^\s*\d+\)\s*','',line).strip() for line in raw.splitlines() if re.match(r'^\s*\d+\)', line)]
        if not cands:
            cands = [l.strip("- ").strip() for l in raw.splitlines() if len(l.strip())>0][:6]
        hist_qs = [h["question"] for h in st.session_state.get("history", [])][-10:]
        selected = pick_diverse(cands, hist_qs)
        st.session_state.current_question = selected or (cands[0] if cands else "ÏßàÎ¨∏ ÏÉùÏÑ± Ïã§Ìå®")
        st.session_state.last_supports_q = supports
    except Exception as e:
        st.error(f"ÏßàÎ¨∏ ÏÉùÏÑ± Ïò§Î•ò: {e}")

st.text_area("ÏßàÎ¨∏", height=110, value=st.session_state.get("current_question",""))

if st.session_state.get("rag_on") and st.session_state.get("last_supports_q"):
    with st.expander("ÏßàÎ¨∏ ÏÉùÏÑ±Ïóê ÏÇ¨Ïö©Îêú Í∑ºÍ±∞ Î≥¥Í∏∞"):
        for i, (_, sc, txt) in enumerate(st.session_state.last_supports_q, 1):
            st.markdown(f"**[{i}] sim={sc:.3f}**\n\n{txt[:600]}{'...' if len(txt)>600 else ''}")
            st.markdown("---")

# ‚ë§ ÎÇòÏùò ÎãµÎ≥Ä / ÏΩîÏπ≠ -----------------------------------------
st.subheader("‚ë§ ÎÇòÏùò ÎãµÎ≥Ä / ÏΩîÏπ≠")
def coach_answer(company: dict, question: str, answer: str, supports: list[Tuple[str,float,str]]) -> dict:
    comp = ["Î¨∏Ï†úÏ†ïÏùò","Îç∞Ïù¥ÌÑ∞/ÏßÄÌëú","Ïã§ÌñâÎ†•/Ï£ºÎèÑÏÑ±","ÌòëÏóÖ/Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖò","Í≥†Í∞ùÍ∞ÄÏπò"]
    news = ", ".join([_snippetize(n["title"], 70) for n in company.get("news", [])[:3]])
    ctx = textwrap.dedent(f"""
    [ÌöåÏÇ¨Î™Ö] {company.get('company_name','')}
    [ÌöåÏÇ¨ ÏÜåÍ∞ú] {company.get('company_intro') or company.get('wiki_summary') or ''}
    [Î™®Ïßë Î∂ÑÏïº] {company.get('role','')}
    [Ï£ºÏöî ÏóÖÎ¨¥] {", ".join(company.get('role_requirements', [])[:6])}
    [ÏûêÍ≤© ÏöîÍ±¥] {", ".join(company.get('role_qualifications', [])[:6])}
    [ÌïµÏã¨Í∞ÄÏπò] {", ".join(company.get('values', [])[:6])}
    [ÏµúÍ∑º Ïù¥Ïäà/Îâ¥Ïä§] {news}
    """).strip()
    rag_note=""
    if supports:
        joined="\n".join([f"- ({s:.3f}) {txt[:500]}" for (_,s,txt) in supports])
        rag_note=f"\n[ÌöåÏÇ¨ Í∑ºÍ±∞ Î¨∏ÏÑú Î∞úÏ∑å]\n{joined}\n"
    sys = f"""ÎÑàÎäî ÌÜ±Ìã∞Ïñ¥ Î©¥Ï†ë ÏΩîÏπòÎã§. ÌïúÍµ≠Ïñ¥Î°ú ÏïÑÎûò ÌòïÏãùÏóê ÎßûÏ∂∞ ÎãµÌïòÎùº:
1) Ï¥ùÏ†ê: 0~10 Ï†ïÏàò 1Í∞ú
2) Í∞ïÏ†ê: 2~3Í∞ú Î∂àÎ¶ø
3) Î¶¨Ïä§ÌÅ¨: 2~3Í∞ú Î∂àÎ¶ø
4) Í∞úÏÑ† Ìè¨Ïù∏Ìä∏: 3Í∞ú Î∂àÎ¶ø (ÌñâÎèô¬∑ÏßÄÌëú¬∑ÏûÑÌå©Ìä∏ Ï§ëÏã¨)
5) ÏàòÏ†ïÎ≥∏ ÎãµÎ≥Ä: STAR(ÏÉÅÌô©-Í≥ºÏ†ú-ÌñâÎèô-ÏÑ±Í≥º) Íµ¨Ï°∞Î°ú Í∞ÑÍ≤∞ÌïòÍ≥† ÏûêÏó∞Ïä§ÎüΩÍ≤å
6) Ïó≠Îüâ Ï†êÏàò: [{", ".join(comp)}] Í∞ÅÍ∞Å 0~5 Ï†ïÏàò (Ìïú Ï§ÑÏóê ÏâºÌëúÎ°ú Íµ¨Î∂Ñ)
Ï±ÑÏ†ê Í∏∞Ï§ÄÏùÄ ÌöåÏÇ¨/ÏßÅÎ¨¥ Îß•ÎùΩ, Ï±ÑÏö©Í≥µÍ≥†(Ï£ºÏöîÏóÖÎ¨¥/ÏûêÍ≤©ÏöîÍ±¥), ÏßàÎ¨∏ ÎÇ¥ Ìè¨Ïª§Ïä§/ÌÇ§ÏõåÎìú Î∂ÄÌï© Ïó¨Î∂ÄÎ•º Ìè¨Ìï®ÌïúÎã§.
Ï∂îÍ∞Ä ÏÑ§Î™Ö Í∏àÏßÄ. ÌòïÏãù Ïú†ÏßÄ."""
    user = f"""[ÌöåÏÇ¨/ÏßÅÎ¨¥ Ïª®ÌÖçÏä§Ìä∏]\n{ctx}\n{rag_note}[Î©¥Ï†ë ÏßàÎ¨∏]\n{question}\n\n[ÌõÑÎ≥¥Ïûê ÎãµÎ≥Ä]\n{answer}"""
    resp = client.chat.completions.create(model=MODEL, temperature=0.35,
                                          messages=[{"role":"system","content":sys},{"role":"user","content":user}])
    content = resp.choices[0].message.content.strip()
    m = re.search(r'([0-9]{1,2})\s*(?:/10|Ï†ê|$)', content)
    score=None
    if m:
        try: score=max(0,min(10,int(m.group(1))))
        except: pass
    nums = re.findall(r'\b([0-5])\b', content.splitlines()[-1])
    comp_scores=[int(x) for x in nums[:5]] if len(nums)>=5 else None
    return {"raw": content, "score": score, "competencies": comp_scores}

if "history" not in st.session_state:
    st.session_state.history = []

ans = st.text_area("Ïó¨Í∏∞Ïóê ÎãµÎ≥ÄÏùÑ ÏûëÏÑ±ÌïòÏÑ∏Ïöî (STAR Í∂åÏû•: ÏÉÅÌô©-Í≥ºÏ†ú-ÌñâÎèô-ÏÑ±Í≥º)", height=180)
if st.button("Ï±ÑÏ†ê & ÏΩîÏπ≠", type="primary", use_container_width=True):
    if not st.session_state.get("current_question"):
        st.warning("Î®ºÏ†Ä 'ÏÉà ÏßàÎ¨∏ Î∞õÍ∏∞'Î°ú ÏßàÎ¨∏ÏùÑ ÏÉùÏÑ±ÌïòÏÑ∏Ïöî.")
    elif not ans.strip():
        st.warning("ÎãµÎ≥ÄÏùÑ ÏûëÏÑ±Ìï¥ Ï£ºÏÑ∏Ïöî.")
    else:
        with st.spinner("ÏΩîÏπ≠ Ï§ë..."):
            sups=[]
            if st.session_state.get("rag_on"):
                q_for_rag = st.session_state["current_question"] + "\n" + ans[:800]
                sups = retrieve_supports(q_for_rag, st.session_state.get("topk",4))
            res = coach_answer(company, st.session_state["current_question"], ans, sups)
            st.session_state.history.append({
                "ts": pd.Timestamp.now(),
                "question": st.session_state["current_question"],
                "user_answer": ans,
                "score": res.get("score"),
                "feedback": res.get("raw"),
                "supports": sups,
                "competencies": res.get("competencies")
            })

# Í≤∞Í≥º/Î†àÏù¥Îçî/CSV --------------------------------------------
st.divider()
st.subheader("ÌîºÎìúÎ∞± Í≤∞Í≥º")
if st.session_state.history:
    last = st.session_state.history[-1]
    c1,c2 = st.columns([1,3])
    with c1: st.metric("Ï¥ùÏ†ê(/10)", last.get("score","‚Äî"))
    with c2: st.markdown(last.get("feedback",""))

    if st.session_state.get("rag_on") and last.get("supports"):
        with st.expander("ÏΩîÏπ≠Ïóê ÏÇ¨Ïö©Îêú Í∑ºÍ±∞ Î≥¥Í∏∞"):
            for i,(_,sc,txt) in enumerate(last["supports"],1):
                st.markdown(f"**[{i}] sim={sc:.3f}**\n\n{txt[:800]}{'...' if len(txt)>800 else ''}")
                st.markdown("---")
else:
    st.info("ÏïÑÏßÅ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.")

st.divider()
st.subheader("Ïó≠Îüâ Î†àÏù¥Îçî (ÏÑ∏ÏÖò ÎàÑÏ†Å)")
competencies = ["Î¨∏Ï†úÏ†ïÏùò","Îç∞Ïù¥ÌÑ∞/ÏßÄÌëú","Ïã§ÌñâÎ†•/Ï£ºÎèÑÏÑ±","ÌòëÏóÖ/Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖò","Í≥†Í∞ùÍ∞ÄÏπò"]
def comp_df(hist):
    rows=[h["competencies"] for h in hist if h.get("competencies") and len(h["competencies"])==5]
    return pd.DataFrame(rows, columns=competencies) if rows else None
cdf = comp_df(st.session_state.history)
if cdf is not None:
    avg = cdf.mean().values.tolist()
    if PLOTLY_OK:
        fig = go.Figure()
        fig.add_trace(go.Scatterpolar(r=avg+[avg[0]], theta=competencies+[competencies[0]], fill='toself'))
        fig.update_layout(polar=dict(radialaxis=dict(visible=True, range=[0,5])), showlegend=False, height=420)
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.bar_chart(pd.DataFrame({"score": avg}, index=competencies))
    st.dataframe(cdf, use_container_width=True)
else:
    st.caption("ÏïÑÏßÅ Ïó≠Îüâ Ï†êÏàòÍ∞Ä ÌååÏã±Îêú ÏΩîÏπ≠ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.")

st.divider()
st.subheader("ÏÑ∏ÏÖò Î¶¨Ìè¨Ìä∏ (CSV)")
def build_report(hist):
    rows=[]
    for h in hist:
        row={"timestamp":h.get("ts"),"question":h.get("question"),"user_answer":h.get("user_answer"),
             "score":h.get("score"),"feedback_raw":h.get("feedback")}
        comps=h.get("competencies")
        if comps and len(comps)==5:
            for k,v in zip(competencies, comps): row[f"comp_{k}"]=v
        sups=h.get("supports") or []
        row["supports_preview"]=" || ".join([s[2][:120].replace("\n"," ") for s in sups])
        rows.append(row)
    return pd.DataFrame(rows) if rows else pd.DataFrame(columns=["timestamp","question","user_answer","score","feedback_raw","supports_preview"])
rep = build_report(st.session_state.history)
st.download_button("CSV Îã§Ïö¥Î°úÎìú", data=rep.to_csv(index=False).encode("utf-8-sig"),
                   file_name="interview_session_report.csv", mime="text/csv")

st.caption("Tip) ÎÑ§Ïù¥Î≤Ñ ÌÇ§(NAVER_CLIENT_ID/SECRET)Î•º ÎÑ£ÏúºÎ©¥ Îâ¥Ïä§¬∑Ïõπ ÌÉêÏÉâ Ï†ïÌôïÎèÑÍ∞Ä ÌÅ¨Í≤å Ìñ•ÏÉÅÎê©ÎãàÎã§. ÏúÑÌÇ§ ÌõÑÎ≥¥ÏóêÏÑú Ï†ïÌôïÌïú ÌöåÏÇ¨Î•º ÏÑ†ÌÉùÌïòÍ≥†, Í∞ÄÎä•ÌïòÎ©¥ Í≥µÍ≥† URLÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.")
